"
"                         ███████████████████████████
"                         ███████▀▀▀░░░░░░░▀▀▀███████
"                         ████▀░░░░░░░░░░░░░░░░░▀████
"                         ███│░░░░░░░░░░░░░░░░░░░│███
"                         ██▌│░░░░░░░░░░░░░░░░░░░│▐██
"                         ██░└┐░░░░░░░░░░░░░░░░░┌┘░██
"                         ██░░└┐░░░░░░░░░░░░░░░┌┘░░██
"                         ██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██
"                         ██▌░│██████▌░░░▐██████│░▐██
"                         ███░│▐███▀▀░░▄░░▀▀███▌│░███
"                         ██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██
"                         ██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██
"                         ████▄─┘██▌░░░░░░░▐██└─▄████
"                         █████░░▐█─┬┬┬┬┬┬┬─█▌░░█████
"                         ████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████
"                         █████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████
"                         ███████▄░░░░░░░░░░░▄███████
"                         ██████████▄▄▄▄▄▄▄██████████
"                         ███████████████████████████
"
"   You are about to experience a potent dosage of Vim. Watch your steps.
"
"                ╔══════════════════════════════════════════╗
"                ║           ⎋ HERE BE VIMPIRES ⎋           ║
"                ╚══════════════════════════════════════════╝

" plug {{{1
call plug#begin('~/.vim/bundle')
  Plug 'jonathanfilip/vim-lucius'
  Plug 'jpo/vim-railscasts-theme'
  Plug 'morhetz/gruvbox'

  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'chrisbra/unicode.vim',      { 'on': ['<plug>(UnicodeComplete)', '<plug>(UnicodeGA)', 'UnicodeTable'] }
  Plug 'easymotion/vim-easymotion', { 'on': '<plug>(easymotion-s2)'     }
  Plug 'godlygeek/csapprox',        { 'for': 'fugitiveblame'            }
  Plug 'junegunn/fzf',              { 'on': 'FZF', 'dir': '~/local/fzf' }
  Plug 'junegunn/vim-easy-align',   { 'on': '<plug>(LiveEasyAlign)'     }
  Plug 'majutsushi/tagbar',         { 'on': 'TagbarToggle'              }
  Plug 'mbbill/undotree',           { 'on': 'UndotreeToggle'            }
  Plug 'tmux-plugins/vim-tmux'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-surround'

  Plug 'elixir-lang/vim-elixir',  { 'for': 'elixir'     }
  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  Plug 'skalnik/vim-vroom'
  Plug 'tpope/vim-rails'
  Plug 'xolox/vim-lua-ftplugin',  { 'for': 'lua'        }
  Plug 'xolox/vim-misc',          { 'for': 'lua'        }

  if has('nvim')
    Plug 'neovimhaskell/haskell-vim',   { 'for': 'haskell' }
    Plug 'neovimhaskell/neovim-ghcmod', { 'for': 'haskell' }
    Plug 'neovimhaskell/nvim-hs',       { 'for': 'haskell' }
  else
    Plug 'ConradIrwin/vim-bracketed-paste'
  endif

  Plug '/data/github/vim-grepper'
  Plug '/data/github/vim-janah'
  Plug '/data/github/vim-randomtag', { 'on': 'Random'   }
  Plug '/data/github/vim-rfc',       { 'on': 'RFC'      }
  Plug '/data/github/vim-sayonara',  { 'on': 'Sayonara' }
  Plug '/data/github/vim-signify'
  Plug '/data/github/vim-startify'
call plug#end()

" init {{{1
filetype plugin indent on
syntax   on
let mapleader = ';'

"autocmd BufReadPre *.asm let b:asmsyntax = 'nasm'
"let b:asmsyntax = 'armasm'

let s:mac = has('mac')

" set {{{1
" indent settings
set autoindent
set cinoptions    =>4,l1,p0,)50,*50,t0
set expandtab
set shiftwidth    =4
set softtabstop   =4

" backup/swap/info/undo settings
set backup
set backupdir     =$HOME/.vim/files/backup/
set backupext     =-vimbackup
set backupskip    =
set directory     =$HOME/.vim/files/swap//
set undodir       =$HOME/.vim/files/undo/
set undofile
set updatecount   =100
if has('nvim')
  set shada       ='100
else
  set viminfo     ='100,n$HOME/.vim/files/info/viminfo
endif

" better navigation
set cursorline
set foldmethod    =marker
set foldtext      =mhi#foldy()
set hlsearch
set ignorecase
set incsearch
set mouse         =a
set scrolloff     =4
set sidescroll    =5
set smartcase

" misc settings
set autoread
set backspace     =indent,eol,start
set clipboard     =unnamed
set complete     -=i
set cpoptions    -=e
set diffopt       =filler,vertical,foldcolumn:0
set fileformats   =unix,dos,mac
set hidden
set history       =10000
set lazyredraw
set more
set mousemodel    =popup
set noautowrite
set noautowriteall
set noequalalways
set noerrorbells
set nofsync
set nojoinspaces
set wrapscan
set nrformats     =hex
set pastetoggle   =<F5>
set norelativenumber
set report        =0
set sessionoptions-=options
set shiftround
set showfulltag
set showtabline   =1
set smarttab
set splitbelow
set splitright
set switchbuf     =useopen,usetab
set synmaxcol     =200
set timeout
set timeoutlen    =1000
set titlestring   =VIM:\ %f
set ttimeout
set ttimeoutlen   =10
set ttyfast
set virtualedit   =onemore,block
set whichwrap     =h,l

" wild stuff
set suffixes     +=.a,.1,.class
set wildignore   +=*.o,*.so,*.zip,*.png
set wildmenu
set wildmode      =list:longest,full
set wildoptions   =tagfile

" display settings
set display       =lastline
set laststatus    =2
set list
set modeline
set modelines     =1
set nostartofline
set numberwidth   =1
set ruler
set shortmess     =aoOTI
set showcmd
set showmatch
set showmode

" spelling
set spellfile     =~/.vim/spell/en.utf-8.add,~/.vim/spell/de.utf-8.add
set spelllang     =en,de

" breaking
set wrap
set linebreak
set breakindent
set breakindentopt=min:40
"set highlight    +=@:SpecialKey

set cpoptions     =aABcefFqsZ
set formatoptions =tcrqnj

if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
  let &fillchars = 'diff:▚'
  let &showbreak = '↪ '
  highlight VertSplit ctermfg=242
  augroup mylist
    autocmd!
    autocmd InsertEnter * set listchars-=trail:⣿
    autocmd InsertLeave * set listchars+=trail:⣿
  augroup END
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  let &fillchars = 'stlnc:#'
  let &showbreak = '-> '
  augroup mylist
    autocmd!
    autocmd InsertEnter * set listchars-=trail:.
    autocmd InsertLeave * set listchars+=trail:.
  augroup END
endif

if executable('ag')
  let &grepprg = 'command ag --nogroup --nocolor'
endif

" mapping {{{1
inoremap jf           <esc>
inoremap <a-o>        <c-o>o
inoremap <a-O>        <c-o>O

inoremap <expr> <tab>   mhi#tab_yeah("\<c-n>", "\<tab>")
inoremap <expr> <s-tab> mhi#tab_yeah("\<c-p>", "\<s-tab>")

inoremap <silent> <c-g><c-t> <c-r>=repeat(complete(col('.'), map(["%Y-%m-%d %H:%M:%S","%a, %d %b %Y %H:%M:%S %z","%Y %b %d","%d-%b-%y","%a %b %d %T %Z %Y"],'strftime(v:val)')+[localtime()]),0)<cr>

nnoremap \            ;
nmap     ga           <plug>(UnicodeGA)

nnoremap <tab>        <c-w>w
nnoremap <s-tab>      <c-w>W

imap     <c-x><c-z>   <plug>(UnicodeComplete)

nnoremap <f1>         :NERDTreeToggle<cr>
nnoremap <f2>         :TagbarToggle<cr>
nnoremap <f3>         :UndotreeToggle<cr>
nnoremap <f4>         :GHDashboard! mhinz<cr>
nnoremap <f5>         :GHActivity! mhinz<cr>
nnoremap <f12>        :set spell!<cr>

nnoremap <silent> L   :call mhi#lookup()<cr>zvzz:call mhi#pulse()<cr>
" nnoremap K            :grep! "\b<c-r><c-w>\b"<cr>:cwindow<cr>

nnoremap <c-g>        :FileInfo<cr>
nnoremap <c-p>        :FZF<cr>

nnoremap <expr> n     'Nn'[v:searchforward].'zvzz'
nnoremap <expr> N     'nN'[v:searchforward].'zvzz'

nnoremap gg           ggzv
nnoremap G            Gzv

nnoremap [q           :cprevious<cr>
nnoremap ]q           :cnext<cr>
nnoremap [Q           :cfirst<cr>
nnoremap ]Q           :clast<cr>

nnoremap [l           :lprevious<cr>
nnoremap ]l           :lnext<cr>
nnoremap [L           :lfirst<cr>
nnoremap ]L           :llast<cr>

nnoremap [b           :bprevious<cr>
nnoremap ]b           :bnext<cr>
nnoremap [B           :bfirst<cr>
nnoremap ]B           :blast<cr>

nnoremap [t           :tabprevious<cr>
nnoremap ]t           :tabnext<cr>
nnoremap [T           :tabfirst<cr>
nnoremap ]T           :tablast<cr>

nnoremap [<space>     :put! =''<cr>
nnoremap ]<space>     :put =''<cr>

nnoremap [e           :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e           :<c-u>execute 'move +'. v:count1<cr>

" switch comma-separated arguments
nnoremap [w           :normal F,h]w2w<cr>
nnoremap ]w           :let s=&isk \| setl isk+=\",' \| exe "norm diwmmebgPdw'mP" \| let &isk=s<cr>

if empty(maparg(']c', 'n'))
  nmap ]c <plug>(signify-next-hunk)
  nmap ]C 999]c
endif
if empty(maparg('[c', 'n'))
  nmap [c <plug>(signify-prev-hunk)
  nmap [C 999[c
endif

nnoremap }            }zz
nnoremap {            {zz
nnoremap ]]           ]]zz
nnoremap [[           [[zz
nnoremap []           []zz
nnoremap ][           ][zz

nnoremap g;           g;zvzz
nnoremap g,           g,zvzz

nnoremap <left>       <c-w>>
nnoremap <right>      <c-w><
nnoremap <up>         <c-w>-
nnoremap <down>       <c-w>+

nnoremap <a-h>        <c-w>h
nnoremap <a-j>        <c-w>j
nnoremap <a-k>        <c-w>k
nnoremap <a-l>        <c-w>l

xnoremap <            <gv
xnoremap >            >gv

onoremap gv           :<c-u>normal! gv<cr>

nnoremap Q            gqap

nnoremap <leader>dd   :Dispatch<cr>
nnoremap <leader>dm   :Make<cr>
nnoremap <leader>ds   :Copen<cr>
nnoremap <leader>ds   :Start<cr>

nnoremap <leader>ev   :vsplit $MYVIMRC<cr>
nnoremap <leader>rv   :source $MYVIMRC<cr>
nnoremap <leader>rr   :source %<cr>

nnoremap <leader>si   :echo mhi#syninfo()<cr>
nnoremap <leader>ss   :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<cr>
nnoremap <leader>st   :Startify<cr>

nnoremap <leader>M    :<c-u><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
nnoremap <leader>Q    :Sayonara!<cr>
nnoremap <leader>f    :FZF<cr>
nnoremap <leader>j    <c-^>
nnoremap <leader>o    :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<cr> \| xargs open<cr><cr>
nnoremap <leader>p    :call mhi#pulse()<cr>
nnoremap <silent> <leader>q    :Sayonara<cr>
nnoremap <leader>v    `[v`]
nnoremap <leader>w    :update<cr>
nnoremap <leader>x    :xit<cr>

nnoremap <leader>l    :noh<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

nnoremap '            `
nnoremap `            '

nnoremap <bs>         <c-t>
nnoremap <cr>         :call mhi#jump()<cr>

cnoremap <c-n>        <down>
cnoremap <c-p>        <up>

cnoremap <leader>r    $VIMRUNTIME/
cnoremap <leader>ft   ~/.vim/after/ftplugin/

xnoremap *            :<c-u>call mhi#search()<cr>//<cr>
xnoremap #            :<c-u>call mhi#search()<cr>??<cr>
xnoremap <leader>*    :<c-u>silent! execute mhi#search_all()<cr>

if has('nvim')
  tnoremap <esc> <c-\><c-n>
  tnoremap <a-h> <c-\><c-n><c-w>h
  tnoremap <a-j> <c-\><c-n><c-w>j
  tnoremap <a-k> <c-\><c-n><c-w>k
  tnoremap <a-l> <c-\><c-n><c-w>l
  autocmd TermClose * call feedkeys('<cr>')
endif

if empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

" autocmd {{{1
augroup myvimrc
  au!

  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe 'normal! g`"zvzz' | endif

  au BufEnter           *                           Cd
  au BufLeave           *.h                         mark H
  au BufLeave           *.{c,cpp}                   mark C
  au BufRead,BufNewFile *.[sS]                      let b:asmsyntax = 'gas'
  au BufRead,BufNewFile *.adoc                      setfiletype asciidoc
  au BufRead,BufNewFile *.{md,mkd}                  setlocal ft=markdown tw=80
  au BufRead,BufNewFile /data/repo/neovim/*         setlocal et sts=2 sw=2 cino=>2,l1,p0,)50,*50,t0
  au BufRead,BufNewFile /data/repo/vim/*            setlocal noet
  au BufRead,BufNewFile /data/repo/vim/src/*.[ch]   setlocal sw=4 sts=4
  au BufRead,BufNewFile Makefile.*,local.mk         setfiletype make | setl noet
  au BufReadPost        fugitive://                 setlocal bufhidden=delete
  au BufWritePost       ~/.Xdefaults                redraw | echo system('xrdb ' . expand('<amatch>'))
  au CompleteDone       *                           pclose
  " au VimEnter           *                           if isdirectory(expand('<afile>')) | Ex | endif

  au User fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> .. :edit %:h<cr> |
        \ endif

  au BufReadPost  * if &bin | silent! exe '%!xxd'    | setlocal filetype=xxd | endif
  au BufWritePre  * if &bin | silent! exe '%!xxd -r' | endif
  au BufWritePost * if &bin | silent! exe '%!xxd'    | setlocal nomodified | endif
augroup END

" commands {{{1
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
command! -bar -nargs=* -complete=help    H           helpgrep <args>
command! -bar -bang    -complete=dir     Cd          call mhi#cd(<bang>0)
command! -bar                            Scriptnames call mhi#scratch('scriptnames') | sil keepp g/^$/d
command! -bar -nargs=1 -complete=command Scratch     call mhi#scratch(<f-args>)
command! -bar                            CleanSpell  runtime! spell/cleanadd.vim
command! -bar                            FileInfo    echo printf("%s%s [%d,%d/%d] --%d%%--",
      \ expand('%:p'),
      \ &modified ? '[+]' : '',
      \ col('.'),
      \ line('.'),
      \ line('$'),
      \ float2nr(line('.') / (line('$') / 100.0))
      \ )

" colors {{{1
if has('gui_running')
  set background=light
  for scheme in ['gruvbox', 'railscasts']
    try
      execute 'colorscheme' scheme
      break
    catch
    endtry
  endfor
  set gcr        =a:blinkoff0
  set mousehide
  set guioptions =a
  if has('gui_mac')
    set nomacmeta
  endif
  " let &guifont = 'Bitstream Vera Sans Mono 9'
  " let &guifont = 'DejaVu Sans Mono 9'
  " let &guifont = 'Droid Sans Mono 9'
  let &guifont = 'Ubuntu Mono:h16'
  command! Bigger  :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)+1', '')
  command! Smaller :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)-1', '')
else
  set background=dark
  augroup mycolors
    autocmd!
    autocmd ColorScheme janah
          \ highlight User1 ctermfg=192 ctermbg=237 cterm=NONE |
          \ highlight User2 ctermfg=167 ctermbg=237 cterm=NONE |
          \ highlight User3 ctermfg=245 ctermbg=237 cterm=NONE |
          \ highlight User4 ctermfg=215 ctermbg=237 cterm=NONE |
          \ highlight User5 ctermfg=111 ctermbg=237 cterm=NONE
    autocmd ColorScheme focus
          \ highlight User1 ctermfg=white ctermbg=black cterm=NONE |
          \ highlight User2 ctermfg=white ctermbg=black cterm=NONE |
          \ highlight User3 ctermfg=white ctermbg=black cterm=NONE |
          \ highlight User4 ctermfg=white ctermbg=black cterm=NONE |
          \ highlight User5 ctermfg=white ctermbg=black cterm=NONE
  augroup END
  for scheme in ['janah', 'focus', 'gruvbox', 'desert']
    try
      execute 'colorscheme' scheme
      break
    catch
    endtry
  endfor
endif

" statusline {{{1
command! -bar ToggleStatusLine let b:stl_location  = !get(b:, 'stl_location')
command! -bar ToggleHighlight  let b:stl_highlight = !get(b:, 'stl_highlight')

function! SetStatusline()
  let stl = ' %4*%<%f%*'

  if exists('b:git_dir')
    let stl    .= '%3*:%*'
    let branch  = fugitive#head(8)
    let stl    .= (branch == 'master') ? '%1*master%*' : '%2*'. branch .'%*'
    let stl    .= mhi#sy_stats_wrapper()
  endif

  let stl .=
        \   '%m%r%h%w'
        \ . '%= '
        \ . '%#ErrorMsg#%{&paste ? " paste " : ""}%*'
        \ . '%#WarningMsg#%{&ff != "unix" ? " ".&ff." ":""}%* '
        \ . '%#warningmsg#%{&fenc != "utf-8" && &fenc != "" ? " ".&fenc." " :""}%* '

  if get(b:, 'stl_highlight')
    let id = synID(line('.'), col('.'), 1)
    let stl .=
          \   '%#WarningMsg#['
          \ . '%{synIDattr('.id.',"name")} as '
          \ . '%{synIDattr(synIDtrans('.id.'),"name")}'
          \ . ']%* '
  endif

  if get(b:, 'stl_location')
    let stl .=
          \   '%3*[%*%v%3*,%*%l%3*/%*%L%3*]%* '
          \ . '%p%3*%%%* '
  endif

  return stl
endfunction

set statusline=%!SetStatusline()

" plugins {{{1
" plugins: misc {{{2
let g:is_bash      = 1
let g:lisp_rainbow = 1

" let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
"let g:loaded_gzip             = 1
" let g:loaded_rrhelper         = 1
" let g:loaded_spellfile_plugin = 1
"let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
"let g:loaded_zipPlugin        = 1

" plugins: netrw {{{2
" let g:loaded_netrwPlugin = 1
let g:netrw_banner       = 0
let g:netrw_keepdir      = 0
let g:netrw_liststyle    = 1
let g:netrw_sort_options = 'i'

" plugins: surround {{{2
let g:surround_indent = 1
let g:surround_{char2nr('e')} = "\\emph{\r}"
let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r"
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_{char2nr('=')} = "== \r =="


" plugins: tagbar {{{2
let g:tagbar_width     = 40
let g:tagbar_autoclose = 0
let g:tagbar_autofocus = 1
let g:tagbar_compact   = 1

" plugins: vim {{{2
let g:vimsyn_folding = 'f'

" plugins: vim-easy-align {{{2
vmap <cr>      <plug>(LiveEasyAlign)
nmap <leader>a <plug>(LiveEasyAlign)

" plugins: vim-easymotion {{{2
let g:EasyMotion_do_mapping        = 0
let g:EasyMotion_do_shade          = 1
let g:EasyMotion_inc_highlight     = 0
let g:EasyMotion_landing_highlight = 0
let g:EasyMotion_off_screen_search = 0
let g:EasyMotion_smartcase         = 0
let g:EasyMotion_startofline       = 0
let g:EasyMotion_use_smartsign_us  = 1
let g:EasyMotion_use_upper         = 0

map <space> <plug>(easymotion-s2)

" plugins: vim-grepper {{{2
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

nnoremap <leader>g :Grepper! -tool git<cr>
nnoremap <leader>G :Grepper! -tool ag<cr>

let g:grepper           = {}
let g:grepper.programs  = ['git', 'ag', 'grep']
let g:grepper.quickfix  = 1
let g:grepper.open      = 1
let g:grepper.switch    = 1
let g:grepper.jump      = 0
" let g:grepper.next_tool = '<leader>g'

" autocmd User Grepper unsilent echomsg 'Grep program finished!'

" plugins: vim-lua-ftplugin {{{2
let g:lua_complete_omni = 1

" plugins: vim-sayonara {{{2
let g:sayonara_confirm_quit = 0

" plugins: vim-signify {{{2
let g:signify_vcs_list = [ 'git', 'hg' ]

omap ic <plug>(signify-motion-inner-pending)
xmap ic <plug>(signify-motion-inner-visual)
omap ac <plug>(signify-motion-outer-pending)
xmap ac <plug>(signify-motion-outer-visual)

" plugins: vim-startify {{{2
let g:startify_list_order = [
      \ ['   MRU '],       'files' ,
      \ ['   MRU DIR '],   'dir',
      \ ['   Sessions '],  'sessions',
      \ ['   Bookmarks '], 'bookmarks',
      \ ]

let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ '/data/repo/neovim/runtime/doc',
      \ '/Users/mhi/local/vim/share/vim/vim74/doc',
      \ ]

let g:startify_bookmarks              = [ {'c': '~/.vim/vimrc'} ]
let g:startify_change_to_dir          = 0
let g:startify_enable_special         = 0
let g:startify_files_number           = 8
let g:startify_session_autoload       = 1
let g:startify_session_delete_buffers = 1
let g:startify_session_persistence    = 1

function! s:center_header(lines) abort
  let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
  let centered_lines = map(copy(a:lines), 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
  return centered_lines
endfunction

let g:startify_custom_header = s:center_header(split(system('tips | '. (s:mac ? 'cowthink' : 'cowsay -f apt')), '\n'))
" }}}1

" vim: sw=2 sts=2 tw=0
