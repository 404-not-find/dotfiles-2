"
"                         ███████████████████████████
"                         ███████▀▀▀░░░░░░░▀▀▀███████
"                         ████▀░░░░░░░░░░░░░░░░░▀████
"                         ███│░░░░░░░░░░░░░░░░░░░│███
"                         ██▌│░░░░░░░░░░░░░░░░░░░│▐██
"                         ██░└┐░░░░░░░░░░░░░░░░░┌┘░██
"                         ██░░└┐░░░░░░░░░░░░░░░┌┘░░██
"                         ██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██
"                         ██▌░│██████▌░░░▐██████│░▐██
"                         ███░│▐███▀▀░░▄░░▀▀███▌│░███
"                         ██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██
"                         ██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██
"                         ████▄─┘██▌░░░░░░░▐██└─▄████
"                         █████░░▐█─┬┬┬┬┬┬┬─█▌░░█████
"                         ████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████
"                         █████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████
"                         ███████▄░░░░░░░░░░░▄███████
"                         ██████████▄▄▄▄▄▄▄██████████
"                         ███████████████████████████
"
"   You are about to experience a potent dosage of Vim. Watch your steps.
"
"                ╔══════════════════════════════════════════╗
"                ║           ⎋ HERE BE VIMPIRES ⎋           ║
"                ╚══════════════════════════════════════════╝

" plug {{{1
let bundle = '~/.vim/bundle'

call plug#begin(bundle)
  Plug 'jonathanfilip/vim-lucius'
  Plug 'jpo/vim-railscasts-theme'
  Plug 'morhetz/gruvbox'

  Plug 'beloglazov/vim-online-thesaurus'
  Plug 'chrisbra/unicode.vim',      { 'on': ['<plug>(UnicodeComplete)', '<plug>(UnicodeGA)', 'UnicodeTable'] }
  Plug 'easymotion/vim-easymotion', { 'on': '<plug>(easymotion-s2)' }
  Plug 'godlygeek/csapprox',        { 'for': 'fugitiveblame' }
  Plug 'junegunn/fzf',              { 'on': 'FZF', 'dir': '~/local/fzf', 'do': './install --bin' }
  Plug 'junegunn/gv.vim',           { 'on': 'GV' }
  Plug 'junegunn/vader.vim',
  Plug 'junegunn/vim-easy-align',   { 'on': '<plug>(LiveEasyAlign)' }
  Plug 'justinmk/vim-dirvish'
  Plug 'majutsushi/tagbar',         { 'on': 'TagbarToggle' }
  Plug 'mbbill/undotree',           { 'on': 'UndotreeToggle' }
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-scriptease'
  Plug 'tpope/vim-surround'
  Plug 'rhysd/vim-grammarous',      { 'on': 'GrammarousCheck' }

  Plug 'tweekmonster/helpful.vim'

  Plug 'elixir-lang/vim-elixir',  { 'for': 'elixir' }
  Plug 'nhooyr/neoman.vim'
  Plug 'tpope/vim-rails'
  Plug 'xolox/vim-lua-ftplugin',  { 'for': 'lua' }
  Plug 'xolox/vim-misc',          { 'for': 'lua' }

  " Plug 'SirVer/ultisnips'
  " Plug 'fatih/vim-go'
  " Plug 'junegunn/fzf.vim'
  " Plug 'junegunn/goyo.vim'
  " Plug 'vim-airline/vim-airline'

  Plug '/data/github/vim-easy-going'
  Plug '/data/github/vim-grepper'
  Plug '/data/github/vim-janah'
  Plug '/data/github/vim-randomtag', { 'on': 'Random'   }
  Plug '/data/github/vim-rfc',       { 'on': 'RFC'      }
  Plug '/data/github/vim-sayonara',  { 'on': 'Sayonara' }
  Plug '/data/github/vim-signify'
  Plug '/data/github/vim-startify'
  Plug '/data/github/vim-syntaxful'
call plug#end()

" init {{{1
filetype plugin indent on
syntax   on
if !has('nvim')
  packadd! matchit
endif

let mapleader = ';'

"autocmd BufReadPre *.asm let b:asmsyntax = 'nasm'
"let b:asmsyntax = 'armasm'

let s:mac = has('mac')

" set {{{1
" indent settings
set autoindent
set cinoptions    =>4,l1,p0,)50,*50,t0
set expandtab
set smarttab
set softtabstop   =4
set shiftwidth    =4
set shiftround

" backup/swap/info/undo settings
set backup
set backupdir     =$HOME/.vim/files/backup/
set backupext     =-vimbackup
set backupskip    =
set directory     =$HOME/.vim/files/swap//
set undodir       =$HOME/.vim/files/undo/
set undofile
set updatecount   =100
if has('nvim')
  set shada       ='100
else
  set viminfo     ='100,n$HOME/.vim/files/info/viminfo
endif

" better navigation
set cursorline
set foldmethod    =marker
set foldtext      =mhi#foldy()
set hlsearch
set ignorecase
set incsearch
set mouse         =
set scrolloff     =4
set sidescroll    =5
set smartcase

" misc settings
set autoread
set backspace     =indent,eol,start
set clipboard     =unnamed
set complete     -=i
set completeopt  +=noselect
set cpoptions    -=e
set diffopt       =filler,vertical,foldcolumn:0
set fileformats   =unix,dos,mac
set hidden
set history       =1000
set lazyredraw
set more
set mousemodel    =popup
set noautowrite
set noautowriteall
set noequalalways
set noerrorbells
set nofsync
set nojoinspaces
set wrapscan
set nrformats     =hex
set pastetoggle   =<F5>
set norelativenumber
set report        =0
set sessionoptions-=options
set showfulltag
set showtabline   =1
set splitbelow
set splitright
set switchbuf     =
set synmaxcol     =200
set timeout
set timeoutlen    =1000
set titlestring   =VIM:\ %f
set ttimeout
set ttimeoutlen   =10
set ttyfast
set virtualedit   =onemore,block
set whichwrap     =h,l

" wild stuff
set suffixes     +=.a,.1,.class
set wildignore   +=*.o,*.so,*.zip,*.png
set wildmenu
set wildmode      =list:longest,full
set wildoptions   =tagfile

" display settings
set display       =lastline
set laststatus    =2
set list
set modeline
set modelines     =1
set nostartofline
set numberwidth   =1
set ruler
set shortmess     =aoOTI
set showcmd
set showmatch
set showmode

" spelling
set spellfile     =~/.vim/spell/en.utf-8.add,~/.vim/spell/de.utf-8.add
set spelllang     =en,de

" breaking
set wrap
set linebreak
set breakindent
set breakindentopt=min:40
"set highlight    +=@:SpecialKey

set cpoptions     =aABcefFqsZ
set formatoptions =tcrqnj

if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
  let &fillchars = 'diff:▚'
  let &showbreak = '↪ '
  highlight VertSplit ctermfg=242
  augroup mylist
    autocmd!
    autocmd InsertEnter * set listchars-=trail:⣿
    autocmd InsertLeave * set listchars+=trail:⣿
  augroup END
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  let &fillchars = 'stlnc:#'
  let &showbreak = '-> '
  augroup mylist
    autocmd!
    autocmd InsertEnter * set listchars-=trail:.
    autocmd InsertLeave * set listchars+=trail:.
  augroup END
endif

" mapping {{{1
inoremap jf           <esc>

inoremap <expr> <tab>   mhi#tab_yeah("\<c-n>", "\<tab>")
inoremap <expr> <s-tab> mhi#tab_yeah("\<c-p>", "\<s-tab>")

nnoremap <c-i>          <c-i>zvzz
nnoremap <c-o>          <c-o>zvzz

nnoremap <silent> L     :call mhi#lookup()<cr>zvzz:call mhi#pulse()<cr>

inoremap <silent> <c-g><c-t> <c-r>=repeat(complete(col('.'), map(["%Y-%m-%d %H:%M:%S","%a, %d %b %Y %H:%M:%S %z","%Y %b %d","%d-%b-%y","%a %b %d %T %Z %Y"],'strftime(v:val)')+[localtime()]),0)<cr>

nnoremap \            ;

nnoremap <f12>        :setlocal spell!<cr>

nnoremap <expr> n     'Nn'[v:searchforward].'zvzz'
nnoremap <expr> N     'nN'[v:searchforward].'zvzz'

nnoremap gg           ggzv
nnoremap G            Gzv

nnoremap [q           :cprevious<cr>
nnoremap ]q           :cnext<cr>
nnoremap [Q           :cfirst<cr>
nnoremap ]Q           :clast<cr>

nnoremap [l           :lprevious<cr>
nnoremap ]l           :lnext<cr>
nnoremap [L           :lfirst<cr>
nnoremap ]L           :llast<cr>

nnoremap [b           :bprevious<cr>
nnoremap ]b           :bnext<cr>
nnoremap [B           :bfirst<cr>
nnoremap ]B           :blast<cr>

nnoremap [t           :tabprevious<cr>
nnoremap ]t           :tabnext<cr>
nnoremap [T           :tabfirst<cr>
nnoremap ]T           :tablast<cr>

nnoremap [<space>     :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>     :<c-u>put =repeat(nr2char(10), v:count1)<cr>

nnoremap [e           :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e           :<c-u>execute 'move +'. v:count1<cr>

" switch comma-separated arguments
nnoremap [w           :normal F,h]w2w<cr>
nnoremap ]w           :let s=&isk \| setl isk+=\",' \| exe "norm diwmmebgPdw'mP" \| let &isk=s<cr>

nnoremap }            }zz
nnoremap {            {zz
nnoremap ]]           ]]zz
nnoremap [[           [[zz
nnoremap []           []zz
nnoremap ][           ][zz

nnoremap g;           g;zvzz
nnoremap g,           g,zvzz

nnoremap <left>       <c-w>>
nnoremap <right>      <c-w><
nnoremap <up>         <c-w>-
nnoremap <down>       <c-w>+

nnoremap <a-h>        <c-w>h
nnoremap <a-j>        <c-w>j
nnoremap <a-k>        <c-w>k
nnoremap <a-l>        <c-w>l

xnoremap <            <gv
xnoremap >            >gv

onoremap gv           :<c-u>normal! gv<cr>

nnoremap Q            gqap

nnoremap <leader>ev   :vsplit $MYVIMRC<cr>
nnoremap <leader>rv   :source $MYVIMRC<cr>
nnoremap <leader>rr   :source %<cr>

nnoremap <leader>si   :echo mhi#syninfo()<cr>
nnoremap <leader>ss   :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<cr>

nnoremap <leader>M    :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
nnoremap <leader>j    <c-^>
nnoremap <leader>o    :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<cr> \| xargs open<cr><cr>
nnoremap <leader>v    `[v`]
nnoremap <leader>w    :update<cr>
nnoremap <leader>x    :xit<cr>

nnoremap <leader>l    :noh<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

nnoremap '            `
nnoremap `            '

nnoremap <bs>         <c-t>
nnoremap <cr>         :call mhi#jump()<cr>

cnoremap <c-n>        <down>
cnoremap <c-p>        <up>

cnoremap <leader>r    $VIMRUNTIME/
cnoremap <leader>ft   ~/.vim/after/ftplugin/

xnoremap *            :<c-u>call mhi#search()<cr>//<cr>
xnoremap #            :<c-u>call mhi#search()<cr>??<cr>
xnoremap <leader>*    :<c-u>silent! execute mhi#search_all()<cr>

if has('nvim')
  nnoremap <leader>t  :vsplit +terminal<cr>
  tnoremap <esc>      <c-\><c-n>
  tnoremap <a-h>      <c-\><c-n><c-w>h
  tnoremap <a-j>      <c-\><c-n><c-w>j
  tnoremap <a-k>      <c-\><c-n><c-w>k
  tnoremap <a-l>      <c-\><c-n><c-w>l
  autocmd BufEnter term://* startinsert
  " autocmd TermClose * call feedkeys('<cr>')
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
elseif empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif

" autocmd {{{1
augroup myvimrc
  au!

  au BufEnter * Cd
  au BufEnter * if isdirectory(expand('<afile>')) | set nobuflisted | endif

  au BufLeave           *.h                       mark H
  au BufLeave           *.{c,cpp}                 mark C

  au BufRead,BufNewFile *.[sS]                    let b:asmsyntax = 'gas'
  au BufRead,BufNewFile *.adoc                    setfiletype asciidoc
  au BufRead,BufNewFile /data/repo/neovim/*       setlocal et sts=2 sw=2 cino=>2,l1,p0,)50,*50,t0
  au BufRead,BufNewFile /data/repo/vim/*          setlocal noet
  au BufRead,BufNewFile /data/repo/vim/src/*.[ch] setlocal sw=4 sts=4
  " au BufRead,BufNewFile Makefile.*,local.mk       setfiletype make | setl noet

  au BufWritePost       ~/.Xdefaults              redraw | echo system('xrdb ' . expand('<amatch>'))
  au CompleteDone       *                         pclose

  au BufReadPost  * if &bin | silent! exe '%!xxd'    | setlocal filetype=xxd | endif
  au BufWritePre  * if &bin | silent! exe '%!xxd -r' | endif
  au BufWritePost * if &bin | silent! exe '%!xxd'    | setlocal nomodified | endif

  au WinEnter    * set cursorline
  au WinLeave    * set nocursorline
  au InsertEnter * set nocursorline
  au InsertLeave * set cursorline

  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe 'normal! g`"zvzz' | endif
  au BufReadPost * if getline(1) =~ '^#!' | let b:start = '-wait=always '.getline(1)[2:].' %' | endif

  au FileType erlang
        \ setl com-=:%

  au FileType git
        \ nnoremap <buffer> gh :call mhi#github_open_issue()<cr>

  au FileType git,text
        \ setl tw=80 fo+=t

  au FileType go
        \ setl noet sts& sw& com-=:// isk-=. mp=go\ install
        \ | let [b:dispatch, b:start] = ['go build', '-wait=always go run %']

  au FileType help
        \ execute 'silent wincmd' 'TL'[winnr('$') == 2]

  au FileType html
        \ setl et sts=2 sw=2

  au FileType lua
        \ setl com-=:# sts=2 sw=2
        \ | let [b:dispatch, b:start] = ['luac -p %', '-wait=always luajit %']

  au FileType mail
        \ setl tw=72 wrap lbr

  au FileType man
        \ setl nocul nomod nolist nonu nornu
        \ | nnoremap <buffer> q :q<cr>

  au FileType markdown
        \ setl tw=80 mp=gomali\ %

  au FileType perl
        \ setl com-=:# kp=perldoc\ -f
        \ | let perl_include_pod = 1
        \ | compiler perl

  au FileType python
        \ setl kp=pydoc mp=./%
        \ | let python_highlight_all = 1
        \ | compiler pyunit

  au FileType ruby
        \ setl com-=:# sts=2 sw=2
        \ | let [ruby_operators, ruby_space_errors] = [1, 1]

  au FileType vim
        \ setl sts=2 sw=2
        \ | let [b:dispatch, b:start] = [':Runtime', ':Runtime|PP']

  au FileType zsh,sh
        \ setl com-=:# mp=shellcheck\ -f\ gcc\ %
augroup END

" commands {{{1
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
command! -bar -nargs=* -complete=help    H           helpgrep <args>
command! -bar -bang    -complete=dir     Cd          call mhi#cd(<bang>0)
" command! -bar                            Scriptnames call mhi#scratch('scriptnames') | sil keepp g/^$/d
command! -bar -nargs=1 -complete=command Scratch     call mhi#scratch(<f-args>)
command! -bar                            CleanSpell  runtime! spell/cleanadd.vim

" colors {{{1
if has('gui_running')
  set background=light
  for scheme in ['gruvbox', 'railscasts']
    try
      execute 'colorscheme' scheme
      break
    catch
    endtry
  endfor
  set gcr        =a:blinkoff0
  set mousehide
  set guioptions =a
  if has('gui_mac')
    set nomacmeta
  endif
  " let &guifont = 'Bitstream Vera Sans Mono 9'
  " let &guifont = 'DejaVu Sans Mono 9'
  " let &guifont = 'Droid Sans Mono 9'
  let &guifont = 'Ubuntu Mono:h16'
  command! Bigger  :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)+1', '')
  command! Smaller :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)-1', '')
else
  set background=dark
  augroup mycolors
    autocmd!
    autocmd ColorScheme janah
          \ highlight User1 ctermfg=192 ctermbg=237 cterm=NONE |
          \ highlight User2 ctermfg=167 ctermbg=237 cterm=NONE |
          \ highlight User3 ctermfg=245 ctermbg=237 cterm=NONE |
          \ highlight User4 ctermfg=215 ctermbg=237 cterm=NONE |
          \ highlight User5 ctermfg=111 ctermbg=237 cterm=NONE
    " autocmd ColorScheme focus
    "       \ highlight User1 ctermfg=white ctermbg=black cterm=NONE |
    "       \ highlight User2 ctermfg=white ctermbg=black cterm=NONE |
    "       \ highlight User3 ctermfg=white ctermbg=black cterm=NONE |
    "       \ highlight User4 ctermfg=white ctermbg=black cterm=NONE |
    "       \ highlight User5 ctermfg=white ctermbg=black cterm=NONE
  augroup END
  for scheme in ['janah', 'focus', 'gruvbox', 'desert']
    try
      execute 'colorscheme' scheme
      break
    catch
    endtry
  endfor
endif

" statusline {{{1
command! -bar ToggleStatusline let b:stl_location  = !get(b:, 'stl_location', 1)
command! -bar ToggleHighlight  let b:stl_highlight = !get(b:, 'stl_highlight')

nnoremap <silent><f10> :ToggleStatusline<cr>
nnoremap <silent><f11> :ToggleHighlight<cr>

set statusline=%!SetStatusline()

function! SetStatusline()
  " let stl = ' %4*%<%f%*'
  let stl = ' %<%f'

  if exists('b:git_dir')
    let stl    .= '%3*:%*'
    let branch  = fugitive#head(8)
    let stl    .= (branch == 'master') ? '%1*master%*' : '%2*'. branch .'%*'
    let stl    .= mhi#sy_stats_wrapper()
  endif

  let stl .=
        \   '%m%r%h%w'
        \ . '%= '
        \ . '%#ErrorMsg#%{&paste ? " paste " : ""}%*'
        \ . '%#WarningMsg#%{&ff != "unix" ? " ".&ff." ":""}%* '
        \ . '%#warningmsg#%{&fenc != "utf-8" && &fenc != "" ? " ".&fenc." " :""}%* '

  if get(b:, 'stl_highlight')
    let id = synID(line('.'), col('.'), 1)
    let stl .=
          \   '%#WarningMsg#['
          \ . '%{synIDattr('.id.',"name")} as '
          \ . '%{synIDattr(synIDtrans('.id.'),"name")}'
          \ . ']%* '
  endif

  if get(b:, 'stl_location', 1)
    let stl .=
          \   '%3*[%*%v%3*,%*%l%3*/%*%L%3*]%* '
          \ . '%p%3*%%%* '
  endif

  return stl
endfunction

" options {{{1
" options: neovim {{{2
let g:python3_host_skip_check = 1

" options: fzf {{{2
set runtimepath+=~/local/fzf

nnoremap <leader><leader> :Buffers<cr>
nnoremap <leader>C        :Colorschemes<cr>
nnoremap <leader>P        :Plugins<cr>
nnoremap <leader>S        :Scriptnames<cr>
nnoremap <leader>f        :FZF<cr>

function! s:buflist()
  return map(filter(range(1, bufnr('$')),
        \ 'bufloaded(v:val)'), 'printf("%s: %s", v:val, bufname(v:val))')
endfunction

function! s:bufopen(lines)
  if len(a:lines) < 2 | return | endif
  let cmd = get({
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \ 'ctrl-t': 'tabedit'
        \ }, a:lines[0], 'edit')
  execute cmd '+b'.matchstr(a:lines[1], '^\d\+')
endfunction

function! s:plugopen(entry)
  execute 'Dirvish' expand(g:bundle) .'/'. a:entry
endfunction

command! Buffers let bl = reverse(s:buflist()) | call fzf#run({
      \ 'source':  bl,
      \ 'sink*':   function('<sid>bufopen'),
      \ 'options': '+m --expect=ctrl-s,ctrl-v,ctrl-t',
      \ 'down':    len(bl) + 2,
      \ }) | unlet bl

command! Plugins call fzf#run({
      \ 'source':  reverse(sort(map(globpath(bundle, '*', 0, 1), 'fnamemodify(v:val, ":t")'))),
      \ 'sink':    function('<sid>plugopen'),
      \ 'options': '+m',
      \ 'left':    30
      \ })

command! Colorschemes call fzf#run({
      \ 'source':  reverse(sort(map(globpath(&rtp, 'colors/*.vim', 0, 1), 'fnamemodify(v:val, ":t:r")'))),
      \ 'sink':    'colorscheme',
      \ 'options': '+m',
      \ 'left':    30
      \ })

" options: gv {{{2
autocmd FileType GV set foldlevel=1

highlight link diffAdded     DiffAdd
highlight link diffRemoved   DiffDelete
highlight link diffFile      Directory
highlight link diffLine      Comment
highlight link diffIndexLine Comment
highlight link diffSubname   Comment

" options: netrw {{{2
" let g:loaded_netrwPlugin = 1
let g:netrw_banner       = 0
let g:netrw_bufsettings  = 'relativenumber'
let g:netrw_keepdir      = 0
let g:netrw_liststyle    = 1
let g:netrw_sort_options = 'i'

" options: surround {{{2
let g:surround_indent = 1
let g:surround_{char2nr('k')} = "<kbd>\r</kbd>"

" options: tagbar {{{2
nnoremap <f2> :TagbarToggle<cr>

let g:tagbar_width     = 40
let g:tagbar_autoclose = 0
let g:tagbar_autofocus = 1
let g:tagbar_compact   = 1

" options: undotree {{{2
nnoremap <f3>  :UndotreeToggle<cr>

" options: vim {{{2
let g:vimsyn_folding = 'f'

let g:is_bash      = 1
let g:lisp_rainbow = 1
let g:markdown_fenced_languages = ['vim']

let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logipat          = 1
" let g:loaded_matchparen       = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zipPlugin        = 1

" options: vim-dirvish {{{2
autocmd FileType dirvish nmap <buffer> <c-o> -
nnoremap <f1> :vsplit +Dirvish<cr><c-w>H<c-w>40<bar>

" options: vim-dispatch {{{2
nnoremap <leader>dd  :Dispatch<cr>
nnoremap <leader>dm  :Make<cr>
nnoremap <leader>ds  :Start<cr>
nnoremap <leader>dc  :Copen<cr>

" options: vim-easy-align {{{2
xmap <cr> <plug>(LiveEasyAlign)

" options: vim-easymotion {{{2
let g:EasyMotion_do_mapping        = 0
let g:EasyMotion_do_shade          = 1
let g:EasyMotion_inc_highlight     = 0
let g:EasyMotion_landing_highlight = 0
let g:EasyMotion_off_screen_search = 0
let g:EasyMotion_smartcase         = 0
let g:EasyMotion_startofline       = 0
let g:EasyMotion_use_smartsign_us  = 1
let g:EasyMotion_use_upper         = 0

map <silent><space> <plug>(easymotion-s2)

" options: vim-fugitive {{{2
function! s:fug()
  if fugitive#buffer().type() =~# '\v^%(tree|blob)$'
    nnoremap <buffer> .. :edit %:h<cr>
  endif
endfunction

autocmd User        fugitive    call <sid>fug()
autocmd BufReadPost fugitive:// setlocal bufhidden=delete

" options: vim-grammarous {{{2
nnoremap <leader>ii :GrammarousCheck<cr>
nmap     <leader>ir <plug>(grammarous-reset)
nmap     <leader>im <plug>(grammarous-move-to-info-window)
nmap     <leader>ic <plug>(grammarous-close-info-window)
nmap     <leader>in <plug>(grammarous-move-to-next-error)
nmap     <leader>ip <plug>(grammarous-move-to-previous-error)
nmap     <leader>if <plug>(grammarous-fixit)

" options: vim-grepper {{{2
nnoremap <leader>g :Grepper -tool git<cr>
nnoremap <leader>G :Grepper -tool ag<cr>
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" options: vim-lua-ftplugin {{{2
let g:lua_complete_omni = 1

" options: vim-online-thesaurus {{{2
nnoremap <leader>k :OnlineThesaurusCurrentWord<cr>
nnoremap <leader>K :Thesaurus<space>

" options: vim-plug {{{2
let g:plug_shallow = 0
let g:plug_window  = 'enew'

" options: vim-sayonara {{{2
nnoremap <silent><leader>q  :Sayonara<cr>
nnoremap <silent><leader>Q  :Sayonara!<cr>

let g:sayonara_confirm_quit = 0

" options: vim-signify {{{2
let g:signify_vcs_list = [ 'git', 'hg' ]

omap ic <plug>(signify-motion-inner-pending)
xmap ic <plug>(signify-motion-inner-visual)
omap ac <plug>(signify-motion-outer-pending)
xmap ac <plug>(signify-motion-outer-visual)

" options: vim-startify {{{2
nnoremap <leader>st  :Startify<cr>

let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ '/data/repo/neovim/runtime/doc',
      \ '/Users/mhi/local/vim/share/vim/vim74/doc',
      \ ]
let g:startify_bookmarks = [
      \ { 'c': '~/.vim/vimrc' },
      \ '~/.zsh/.zshrc',
      \ ]
let g:startify_transformations = [
      \ ['.*vimrc$', 'vimrc'],
      \ ]

let g:startify_change_to_dir          = 0
let g:startify_enable_special         = 0
let g:startify_files_number           = 8
let g:startify_session_autoload       = 0
let g:startify_session_delete_buffers = 1
let g:startify_session_persistence    = 0
let g:startify_update_oldfiles        = 1
let g:startify_use_env                = 1
" }}}1

" vim: sw=2 sts=2 tw=0
