snippet /
	/* ${1} */${2}
snippet //
	// ${1}
snippet mal
	${1} *${2} = malloc(${3});${4}
snippet error
	if (${1}) {
	    fprintf(stderr, "${2}\n");
	    exit(1);
	}
	${3}
snippet nn
	if (${1} != NULL)${2}
snippet n
	if (${1} == NULL)${2}
snippet scc
	static const char ${1} = ${2};
snippet m
	int main(int argc, char **argv) {
		${1}
	}
snippet mn
	int main(void) {
		${1}
	}
snippet sta
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <unistd.h>
	${1}
snippet net
	#include <signal.h>
	#include <netdb.h>
	#include <errno.h>
	${1}
snippet lkm
	#include <linux/kernel.h>
	#include <linux/module.h>
	#include <linux/fs.h>
	${1}
snippet in
	#include <${1:stdio}.h>${2}
snippet In
	#include "${1:`Filename("$1")`}.h"${2}
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet d
	#define ${1}
snippet de
	#define "${1}"${2}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
snippet i
	if (${1})
		${2}
snippet I
	if (${1}) {
		${2}
	} else {
		${3}
	}
	${4}
snippet ei
	else if (${1}) {
		${2}
snippet Ei
	else if (${1})
		${2}
snippet e
	else {
		${1}
	}
snippet E
	else
		${1}
snippet t
	${1} ? ${2} : ${3}
snippet do
	do {
		${2}
	} while (${1});
snippet w
	while (${1}) {
		${2}
	}
snippet W
	while (${1})
		${2}
snippet for
	for (${1}; ${2}; ${3}) {
		${4}
	}
snippet f
	${1}(${2})
	{
		${3}
	}
snippet td
	typedef ${1};
	${2}
snippet s
	struct ${1} {
		${2}
	} ${3};
	${4}
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
snippet pu
	puts("${1}");${2}
snippet p
	printf("${1}", ${2});${3}
snippet fp
	fprintf(stderr, "${1}", ${2});${3}
snippet ?
	/*
	 * ${1}
	 */${2}
snippet .
	[${1}]${2}
