#!/usr/bin/env bash
#
# Simple todo list manager.
#
# Tasks will be written to ~/tasks.
# Finished tasks, plus a timestamp, will be written to ~/tasks.log.

usage() {
    cat << 'EOF'
  task ...    add task
  task        show task #1
  task -a     show all tasks
  task -e     edit tasks using $EDITOR
  task -f     finish task #1
  task -f 3   finish task #3
  task 3      finish task #3
  task -fa    finish all tasks
EOF
}

task_exists() {
    if [[ -s ~/tasks ]]; then
        if [[ "$(uname -s)" == Linux ]]; then
            shaprog=sha1sum
        else
            shaprog='shasum -a 1'
        fi
        newline_sha="$($shaprog <<< "$*" | cut -d' ' -f1)"
        while read -r line; do
            line_sha="$($shaprog <<< "$line" | cut -d' ' -f1)"
            if [ "$line_sha" = "$newline_sha" ]; then
                return 0
            fi
        done < ~/tasks
    fi
    return 1
}

list_tasks() {
    if [[ -s ~/tasks ]]; then
        if (( $# == 0 )); then
            nl -w2 -s'  ' ~/tasks
        else
            sed -n "${1}p" < ~/tasks
        fi
    else
        echo -e "\e[1mLAZY TIME\e[0m"
    fi
}

add_task() {
    if [[ "$*" =~ ^[0-9]+$ ]]; then
        remove_task "$@"
    elif task_exists "$@"; then
        echo "Task exists already."
    else
        echo "$@" >> ~/tasks
    fi
}

remove_task() {
    if (( $# == 0 )); then
        read -rp "Really? [yN] " answer
        [[ "$answer" != y ]] && return
    fi
    line="$(2>/dev/null sed -i '' -e "${1}w /dev/stdout" -e "${1}d" ~/tasks)"
    if [[ -n $line ]]; then
        while IFS= read -r task; do
            echo "$(date +'%F %R') $task" >> ~/tasks.log
            echo "Finished: $task"
            printf 'Next:     '
            list_tasks 1
        done <<< "$line"
    fi
}

task() {
    if (( $# )); then
        add_task "$@"
    else
        list_tasks 1
    fi
}

case "$1" in
    -a)
        list_tasks
        ;;
    -e)
        $EDITOR ~/tasks
        ;;
    -f)
        shift
        if (( $# == 0 )); then
            remove_task 1
        else
            remove_task "$1"
        fi
        ;;
    -fa)
        remove_task
        ;;
    -h)
        usage
        ;;
    *)
        task "$@"
        ;;
esac
