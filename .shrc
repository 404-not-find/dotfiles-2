# Keep it POSIX.

if [ "$ITERM_PROFILE" = Dark ]; then
    eval $(dircolors ~/.zsh/dircolors.dark)
    ln -fs \
        ~/.config/git/config.colors.dark \
        ~/.config/git/config.colors
else
    eval $(dircolors ~/.zsh/dircolors.light)
    ln -fs \
        ~/.config/git/config.colors.light \
        ~/.config/git/config.colors
fi

# Aliases {{{1
alias d='docker'
alias dc='docker-compose'
alias g='git'
alias gpg='gpg2'

alias aptup="sudo -- sh -c 'apt-get update && apt-get upgrade'"
alias brewup='brew update && brew upgrade && brew cleanup'
alias pip2up="pip2 list --format=legacy | cut -d' ' -f1 | xargs pip2 install -U"
alias pip3up="pip3 list --format=legacy | cut -d' ' -f1 | xargs pip3 install -U"
alias gemup="rbenv exec gem update --system && rbenv exec gem update && rbenv exec gem cleanup"
alias npmup="npm install npm@latest -g && npm -g update"

alias stripcolors='sed -r "s/\x1b\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

alias mirror='noglob wget --mirror --no-parent --recursive --timestamping --continue --recursive $1'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias val='valgrind -v --leak-check=full --show-reachable=yes'
alias yt2mp3='youtube-dl -x --audio-format mp3 --audio-quality 0 --prefer-ffmpeg'

alias rt='cd ~torrent/../session && rtorrent'

alias chrome='open -a Google\ Chrome'
alias preview='open -a Preview'
alias vlc='open -a VLC'

alias ls='ls --color=always -N'
alias grep='grep --color=always'

alias j='ls -lhd *(D-/)'
alias k='ls -lhX *(D-^/)'
alias l='ls -lh --group-directories-first'
alias ll='ls -lhX --group-directories-first'
alias la='ls -lhXA --group-directories-first'
alias n='ls -lhS *(DOL[1,5]^/)'

alias h='cd ..; l'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

alias 1='fg %1'
alias 2='fg %2'
alias 3='fg %3'
alias 11='bg %1'
alias 22='bg %2'
alias 33='bg %3'

# Functions {{{1
ssh() {
    if [ $# -eq 0 ]; then
        mhi net hosts
    else
        command ssh -t $1 "export ITERM_PROFILE=$ITERM_PROFILE; exec \$SHELL -l"
    fi
}

r() {
  exec $SHELL
}

md() {
  command mkdir $1 && builtin cd $1
}

rd() {
  dir=$PWD
  builtin cd ..
  if command rmdir $dir 2>/dev/null; then
    echo 'Removed empty directory:' $dir
  else
    builtin cd $dir
    echo 'Directory is not empty:'
    ls -A
  fi
  unset dir
}

lookup() {
  open "https://sks-keyservers.net/pks/lookup?search=${*}"
}

camusedby() {
  echo 'Recent camera uses:'
  local usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
  echo $usedby
}

fix-perm() {
  [[ $1 = -h ]] && {
    echo 'usage: fix-perm [dirs:700] [files:600]'
    return 1
  } 1>&2
  find . -type d -exec chmod ${1-700} {} +
  find . -type f -exec chmod ${2-600} {} +
}
# }}}

# Chrome {{{1
ch() {
  export CONF_COLS=$[ COLUMNS/2 ]
  export CONF_SEP='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h

  sqlite3 -separator $CONF_SEP /tmp/h 'select title, url from urls order by last_visit_time desc' \
      | ruby -ne '
  cols = ENV["CONF_COLS"].to_i
  title, url = $_.split(ENV["CONF_SEP"])
  puts "\x1b[33m#{title.ljust(cols)}\x1b[0m #{url}"' \
      | fzf --ansi --multi --no-hscroll --tiebreak=index \
      | grep --color=never -o 'https\?://.*' \
      | xargs open

  unset CONF_COLS CONF_SEP
}

# FZF {{{1
f() {
  [ -n "$@" ] && args="-q $@"
  IFS=$'\n'
  files=`fzf-tmux -m -1 --tac --tiebreak=index $args`
  [ -n "$files" ] && $EDITOR $files
  unset IFS files args
}

p() {
  dirs="/data/github /data/repo $HOME/.vim/bundle"
  [ -n "$ZSH_VERSION" ] && setopt local_options sh_word_split
  [ -n "$@" ] && args="-q $@"
  IFS=$' '
  dir=`find $dirs -type d -mindepth 1 -maxdepth 1 | fzf-tmux -1 --tac "$args"`
  [ -d "$dir" ] && cd $dir && clear
  unset IFS dirs dir args
}

pf() {
  p && f
}

c() {
    read -d '' configs <<EOF
$HOME/.bash_profile
$HOME/.bashrc
$HOME/.config/git/config
$HOME/.profile
$HOME/.shrc
$HOME/.tmux.conf
$HOME/.vim/autoload/mhi.vim
$HOME/.vim/vimrc
$HOME/.zsh/.zprofile
$HOME/.zsh/.zshrc
$HOME/.zshenv
EOF
  [ -n "$@" ] && args="-q $@"
  files=`echo "$configs" | fzf-tmux -m -1 --tac --tiebreak=index "$args" | xargs`
  [ -n "$files" ] && $EDITOR $files
  unset configs files args
}

# Git {{{1
pr() {
    local origin pr
    if [[ $# == 0 ]]; then
        echo "usage: pr [remote] <ref>"
        return 1
    elif [[ $# == 1 ]]; then
        origin=$(git config branch.master.remote || echo origin)
        pr=$1
    else
        origin=$1
        pr=$2
    fi
    git fetch $origin refs/pull/${pr}/head || return
    git checkout -q FETCH_HEAD
}

b() {
    git checkout $(git branch -a | fzf -1 | cut -c3-)
}

gho() {
  local prefix
  prefix=$(git rev-parse --show-prefix)
  (( $? )) && return 1
  local branch=$(git symbolic-ref -q --short HEAD)
  local remote=$(git config branch.master.remote || echo origin)
  local url=$(git config remote.${remote}.url)
  url=${url/git\@github\.com:/https:\/\/github.com/}
  url=${url%\.git}
  open ${url}/tree/${branch}/${prefix}${1:-}
}

alias gv="nvim +GV +'sil tabc 2' +'exe \"normal \<cr>\"'"

# iTerm2 {{{1
proftoggle() {
    if [[ -z $ITERM_PROFILE ]]; then
        print "Not in iTerm" 1>&2
        return
    fi
    tmup
    if [[ $ITERM_PROFILE == Light ]]; then
        export ITERM_PROFILE=Dark
        eval $(dircolors ~/.zsh/dircolors.dark)
        ln -fs \
            ~/.config/git/config.colors.dark \
            ~/.config/git/config.colors
    else
        export ITERM_PROFILE=Light
        eval $(dircolors ~/.zsh/dircolors.light)
        ln -fs \
            ~/.config/git/config.colors.light \
            ~/.config/git/config.colors
    fi
    local seq="\e]1337;SetProfile=${ITERM_PROFILE}\x7"
    if [[ -n $TMUX ]]; then
        seq="\ePtmux;\e${seq}\e\\"
        tmux setenv ITERM_PROFILE $ITERM_PROFILE
    fi
    printf $seq
    clear
}

# Tmux {{{1
tm() {
    if (( $# )); then
        tmux has-session -t "$*" && tmux attach -t "$*" || tmux new-session -s "$*"
    else
        tmux attach || tmux new-session -s default
    fi
}

tmup() {
    [[ -n $TMUX ]] && export $(tmux showenv | grep --color=never '^[^-]' | xargs)
}

# Vim {{{1
alias vu='vim -u NONE -U NONE -i NONE -N'
alias nv='VIMRUNTIME=/data/repo/neovim/runtime /data/repo/neovim/build/bin/nvim'
alias v=$EDITOR

va() {
    nvim -q <(ag --vimgrep "$@")
}

vg() {
    nvim -q <(git grep -nI "$@")
}

# Run a legacy test in ~v/src/testdir
vt() {
    vim -u unix.vim -U NONE --noplugin -s dotest.in $1
    test -f ${1%.*}.failed && diff -u ${1%.*}.ok ${1%.*}.failed
}

# vim: ft=sh fdm=marker
